<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.bigjava.dao.EmployeeMapper">
  <resultMap id="BaseResultMap" type="org.bigjava.bean.Employee">
    <id column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="employee_name" jdbcType="VARCHAR" property="employeeName" />
    <result column="gender" jdbcType="CHAR" property="gender" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="salary" jdbcType="INTEGER" property="salary" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
  </resultMap>
  <resultMap id="WithDepartmentResultMap" type="org.bigjava.bean.Employee">
    <id column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="employee_name" jdbcType="VARCHAR" property="employeeName" />
    <result column="gender" jdbcType="CHAR" property="gender" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="salary" jdbcType="INTEGER" property="salary"/>
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
    <association property="department" javaType="org.bigjava.bean.Department">
      <id property="departmentId" column="department_id"/>
      <result property="departmentName" column="department_name"/>
    </association>

  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    employee_id, employee_name, gender, email, salary, department_id
  </sql>
  <sql id="WithDepartment_Column_List">
    e.employee_id, e.employee_name, e.gender, e.email,e.salary, e.department_id,d.department_id,d.department_name
  </sql>

  <select id="selectByExampleWithDepartment" resultMap="WithDepartmentResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithDepartment_Column_List" />
    from t_employee e
    left join t_department d on e.department_id = d.department_id
    order by e.employee_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <!--    <if test="orderByClause != null">-->
    <!--      order by e.employee_id-->
    <!--    </if>-->
  </select>

  <select id="selectByPrimaryKeyWithDepartment" resultMap="WithDepartmentResultMap">
    select
    <include refid="WithDepartment_Column_List" />
    from t_employee e
    left join t_department d on d.department_id = e.department_id
    where employee_id = #{employeeId,jdbcType=INTEGER}

  </select>
  <select id="selectByExample" parameterType="org.bigjava.bean.EmployeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_employee
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_employee
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.bigjava.bean.EmployeeExample">
    delete from t_employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.bigjava.bean.Employee">
    insert into t_employee (employee_id, employee_name, gender, 
      email, salary, department_id
      )
    values (#{employeeId,jdbcType=INTEGER}, #{employeeName,jdbcType=VARCHAR}, #{gender,jdbcType=CHAR}, 
      #{email,jdbcType=VARCHAR}, #{salary,jdbcType=INTEGER}, #{departmentId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.bigjava.bean.Employee">
    insert into t_employee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="employeeName != null">
        employee_name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="employeeName != null">
        #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=CHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.bigjava.bean.EmployeeExample" resultType="java.lang.Long">
    select count(*) from t_employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_employee
    <set>
      <if test="record.employeeId != null">
        employee_id = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.employeeName != null">
        employee_name = #{record.employeeName,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=CHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.salary != null">
        salary = #{record.salary,jdbcType=INTEGER},
      </if>
      <if test="record.departmentId != null">
        department_id = #{record.departmentId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_employee
    set employee_id = #{record.employeeId,jdbcType=INTEGER},
      employee_name = #{record.employeeName,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=CHAR},
      email = #{record.email,jdbcType=VARCHAR},
      salary = #{record.salary,jdbcType=INTEGER},
      department_id = #{record.departmentId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.bigjava.bean.Employee">
    update t_employee
    <set>
      <if test="employeeName != null">
        employee_name = #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=CHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
    </set>
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.bigjava.bean.Employee">
    update t_employee
    set employee_name = #{employeeName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=CHAR},
      email = #{email,jdbcType=VARCHAR},
      salary = #{salary,jdbcType=INTEGER},
      department_id = #{departmentId,jdbcType=INTEGER}
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </update>
</mapper>