<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.bigjava.dao.UserDao">

    <resultMap id="userMap" type="org.bigjava.bean.User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="address" column="address"/>
        <result property="phone" column="phone"/>
    </resultMap>

    <!--  User getUserById(Integer id);  -->
    <select id="getUserById" resultMap="userMap">
        select * from test.user where id =#{id}
    </select>
    <!--  List<User> getAllUsers(User user);  -->
    <select id="getAllUsers" resultMap="userMap">
        select * from test.user
            <!--
                <where>:可以帮我们去除sql语句前面的and,以后都使用where标签，不推荐写死where
             -->
            <where >
                <!--
                    <trim>：截取字符串
                    prefix=""  为我们下面所有的sql语句添加一个前缀
                    prefixOverrides=""  去除所有sql语句前面多余的字符
                    suffix=""  为我们下面所有的sql语句添加一个后缀
                    suffixOverrides="" 去除所有sql语句后面多余的字符
                 -->
                <trim  prefixOverrides="and" suffixOverrides="and">
                    <!--
                        if():传入非常强大的判读条件，OGNL表达式
                        test="" : 编写判断条件
                        id！=null ： 取出传入的Javabean属性中的id值，判断其是否为空
                     -->
                    <if test="id!=null">
                        id>#{id} and
                    </if>
                    <if test="phone!=null">
                         phone like #{phone} and
                    </if>
                    <if test="name!=null and !name.equals(&quot;&quot;)">
                         name = #{name} and
                    </if>
                </trim>
            </where>
    </select>

    <!--  List<User> getUsersForeach(List<Integer> ids);  -->
    <select id="getUsersForeach" resultMap="userMap">
        select * from test.user where id in
        <!--
            <foreach>:遍历集合
                collection=""：指定要遍历的集合的key，使用@Param为该集合指定一个key
                close="" ： sql语句以什么结尾
                index="" ：索引
                            如果遍历的是一个list集合：
                                index：指定的遍历保存了当前的索引
                                item：保存当前遍历的元素的值
                            如果是遍历的是一个map集合：
                                index：指定的变量就是保存了当前遍历的元素的key
                                item：就是保存当前的元素的值
                item="" ： 每次遍历出的元素起一个变量名方便引用
                open="" ： sql语句以什么开始
                separator="" ： 每次遍历的元素的分隔符

        -->
        <foreach collection="ids" open="(" close=")" index="" item="ids_item"  separator=",">
            #{ids_item}
        </foreach>
    </select>

    <!--  List<User> getUsersChoose(User user);  -->
    <select id="getUsersChoose" resultMap="userMap">
        select * from test.user
        <where>
            <choose>
                <when test="id!=null">
                    id = #{id}
                </when>
                <when test="name!=null and !name.equals(&quot;&quot;)">
                    name=#{name}
                </when>
                <when test="address!=null and !address.equals(&quot;&quot;)">
                    address=#{address}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--  int updateUser(User user);  -->
    <update id="updateUser">
        update test.user
       <set>


        <if test="name!=null and !name.equals(&quot;&quot;)">
            name = #{name},
        </if>
        <if test="password!=null and !password.equals(&quot;&quot;)">
            password = #{password},
        </if>
        <if test="address!=null and !address.equals(&quot;&quot;)">
            address = #{address},
        </if>
        <if test="phone!=null and !phone.equals(&quot;&quot;)">
            phone = #{phone},
        </if>
        </set>
        <where>
            id=#{id}
        </where>
    </update>
</mapper>